import { useRef, useState, useEffect, useCallback } from "react";
import styled from "styled-components";
import axios from 'axios';

const InfiniteContainer = styled.div`
    display: flex;
    width: 100%;
    min-height: 100vh;
    padding-top: 100px;
    padding-bottom: 100px;
    -webkit-box-pack: center;
    justify-content: center;
    -webkit-box-align: center;
    align-items: center;
    font-family: Arial,sans-serif;
    font-size: 14px;
    line-height: 20px;
    color: #333;
`;

const InfiniteItemList = styled.div`
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    flex-direction: column;
    grid-column-gap: 40px;
    grid-row-gap: 40px;
`;

const InfiniteItem = styled.div`
  -webkit-box-direction: normal;
`;

const InfintieBox = styled.div`
  display: flex;
    min-width: 400px;
    height: 100px;
    padding: 40px;
    -webkit-box-align: center;
    align-items: center;
    grid-column-gap: 24px;
    grid-row-gap: 24px;
    border: 1px solid #000;
    background-color: #fff;
    color: #000;
    text-decoration: none;
    max-width: 100%;
    border: 1px solid black;
    position: relative;
    cursor: pointer;
  
  img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-position: 50% 50%;
    background-size: cover;
    background-repeat: no-repeat;
    display: block;
    font-family: Arial,sans-serif;
    font-size: 14px;
    line-height: 20px;
  };
  p {
    font-weight: 700;
  };


  .floating {
    position: absolute;
    left: 0%;
    top: 0%;
    right: auto;
    bottom: auto;
    display: flex;
    width: 34px;
    height: 34px;
    -webkit-box-pack: center;
    justify-content: center;
    -webkit-box-align: center;
    align-items: center;
    background-color: #000;
    color: #fff;
    font-weight: 700;
  }
`;

const InfinitePage = () => {

  const obsRef = useRef(null); //observer Element
  const [list, setList] = useState([]) // post List

  const [page, setPage] = useState(1); // 현재 페이지
  const [load, setLoad] = useState(false); // 로딩 스피너
  const preventRef = useRef(true); // 옵저버 중복 실행 방지
  const endRef = useRef(false); // 모든 글 로드 확인

  useEffect(() => { // 옵저버 생성
    const observer = new IntersectionObserver(obsHandler, { threshold: 0.5 });
    if (obsRef.current) observer.observe(obsRef.current);
    return () => { observer.disconnect(); }
  }, [])

  useEffect(() => {
    getPost();
  }, [page])

  const obsHandler = ((entries) => { //옵저버 콜백함수
    const target = entries[0];
    if (!endRef.current && target.isIntersecting && preventRef.current) { //옵저버 중복 실행 방지
      preventRef.current = false; //옵저버 중복 실행 방지
      setPage(prev => prev + 1); //페이지 값 증가
    }
  })

  const getPost = useCallback(async () => {
    // 글 불러오기
    setLoad(true); // 로딩 시작
    try {
      const res = await axios.get('', {
        params: {
          page: page,
          key: 'live_3kRldRFDDiy1qeqiJjrqOtZmqYlCgE1t8ny81mWzJjnzipRN5R50zrqFYcbACdaj'
        }
      });
      if (res.data.end) {
        // 마지막 페이지일 경우
        endRef.current = true;
        noPostShow();
        setList(prev => [...prev, ...res.data.list]); // 리스트 추가
        prevent_duple.current = true;
      }
    } catch (e) {
      console.error(e);
    } finally {
      setLoad(false); // 로딩 종료
    }
  }, [page]);


  return (
    <InfiniteContainer>
      <InfiniteItemList>
        <InfiniteItem>
          <InfintieBox>
            <img></img>
            <p>이도영</p>
            <h3>mzmzm@naver.com</h3>
            <div className="floating">1</div>
          </InfintieBox>
        </InfiniteItem>
      </InfiniteItemList>
    </InfiniteContainer>
  )
}

export default InfinitePage;

7-15행: 컨테이너 스타일을 지정한 InfiniteContainer 컴포넌트를 정의합니다.
17-23행: 아이템 목록을 표시하기 위한 스타일을 지정한 InfiniteItemList 컴포넌트를 정의합니다.
25-40행: 각 아이템을 표시하기 위한 스타일을 지정한 InfiniteItem 컴포넌트를 정의합니다.
43행: obsRef라는 useRef 훅을 사용하여 옵저버 엘리먼트를 참조합니다.
44행: 포스트 목록을 저장하기 위한 상태 list와 초기값을 설정하는 setList 함수를 정의합니다.
45행: 현재 페이지를 저장하기 위한 상태 page와 초기값을 설정하는 setPage 함수를 정의합니다.
46행: 데이터 로딩 상태를 저장하기 위한 상태 loading과 초기값을 설정하는 setLoading 함수를 정의합니다.
47행: 모든 글을 로드했는지 확인하기 위한 상태 endRef와 초기값을 설정합니다.
50-56행: 페이지 변경 시 글을 불러오는 getPost 함수를 정의합니다.
59-65행: 옵저버 콜백 함수인 obsHandler를 정의합니다.
68-95행: useEffect 훅을 사용하여 페이지 변경 시 getPost 함수를 호출하고, 옵저버 콜백 함수를 설정합니다.
97-104행: useEffect 훅을 사용하여 옵저버를 생성하고 observer 엘리먼트에 연결합니다. 컴포넌트가 언마운트될 때 옵저버를 해제합니다.
107-134행: JSX를 반환하는 InfinitePage 컴포넌트를 정의합니다.
110행: InfiniteItemList 컴포넌트를 사용하여 아이템 목록을 출력합니다.
112-131행: list 배열의 각 아이템을 순회하며 아이템을 표시하는 InfiniteItem 컴포넌트를 렌더링합니다. 이미지와 종 이름, 순서를 표시합니다.
134행: loading이 true일 때 "Loading..."을 표시합니다.
136행: obsRef를 옵저버 엘리먼트로 설정합니다. 이 엘리먼트를 기준으로 스크롤 위치를 감지하여 무한 스크롤을 구현합니다.
이렇게 수정된 코드는 무한 스크롤을 구현하면서, 스크롤이 아래로 내려갈 때마다 추가 데이터를 가져와 리스트를 동적으로 확장시킵니다. 로딩 중일 때는 "Loading..." 메시지를 표시하여 사용자에게 로딩 상태를 알립니다.

